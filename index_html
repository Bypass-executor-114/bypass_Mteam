

// ==UserScript==

// @name         Roblox大部分注入器、脚本绕过

// @homepageURL  https://discord.gg/unluckify

// @description  bypasses Roblox Exploits Key Systems (Codex, Fluxus, Arceus, Delta, Valyse, Keyrblx, Pandadevelopment, HoHo Hub, Tsuohub)

// @author       Unluckify (913317548014055435)



// @match        https://mobile.codex.lol/*

// @match        https://fluxusbypass.pages.dev/*

// @match        https://keysystem.fluxteam.net/android/checkpoint/start.php?HWID=*

// @match        https://spdmteam.com/key-system-1?hwid=*

// @match        https://gateway.platoboost.com/a/8?id=*

// @match        https://valyse.best/verification?device_id=*

// @match        https://keyrblx.com/getkey/*

// @match        https://pandadevelopment.net/getkey?*

// @match        https://hohohubv-ac90f67762c4.herokuapp.com/api/getkeyv2?hwid=*

// @match        https://tsuo-script.xyz/*



// @connect      linkvertise.com

// @connect      short-jambo.com

// @connect      api.codex.lol

// @connect      cdn.jsdelivr.net

// @connect      fluxteam.net

// @connect      spdmteam.com

// @connect      api-gateway.platoboost.com

// @connect      api.valyse.best

// @connect      api.keyrblx.com

// @connect      pandadevelopment.net

// @connect      hohohubv-ac90f67762c4.herokuapp.com

// @connect      tsuo-script.xyz

// @connect      *



// @version      1708415891822

// @run-at       document-end

// @grant        GM_xmlhttpRequest

// @grant        GM_notification

// @grant        GM_openInTab



// @license      MIT

// @supportURL   https://discord.gg/T5k3PnR2e4

// @icon         https://play-lh.googleusercontent.com/WNWZaxi9RdJKe2GQM3vqXIAkk69mnIl4Cc8EyZcir2SKlVOxeUv9tZGfNTmNaLC717Ht

// @namespace    https://greasgreasyforkgreasyforkyfork.org/en/users/1302965-unluckunlhttps://greasgreasyforkgreasyforkyfork.org/en/users/1302965-unluckunluckyy-kiduckyy-kid

// ==/UserScript==



if (document.title == 'Just a moment...') {

    return;

}



/******/ (() => { // webpackBootstrap

/******/ 	var __webpack_modules__ = ({



/***/ 598:

/***/ ((module) => {





/***/ }),



/***/ 80:

/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



const { handleError, sleep, linkvertiseSpoof, getTurnstileResponse, getGrecaptchaResponse, notification, base64decode } = __webpack_require__(712)



async function codex() {

    let session;

    while (!session) {

        session = localStorage.getItem("android-session");

        await sleep(1000);

    }

    if (document?.getElementsByTagName('a')?.length && document.getElementsByTagName('a')[0].innerHTML.includes('Get started')) {

        document.getElementsByTagName('a')[0].click();

    }



    async function getStages() {

        let response = await fetch('https://api.codex.lol/v1/stage/stages', {

            method: 'GET',

            headers: {

                'Android-Session': session

            }

        });

        let data = await response.json();



        if (data.success) {

            if (data.authenticated) {

                return [];

            }

            return data.stages;

        }

        else {

            throw new Error("failed to get stages");

        }

    }

    async function initiateStage(stageId) {

        let response = await fetch('https://api.codex.lol/v1/stage/initiate', {

            method: 'POST',

            headers: {

                'Android-Session': session,

                'Content-Type': 'application/json'

            },

            body: JSON.stringify({ stageId })

        });

        let data = await response.json();



        if (data.success) {

            return data.token;

        }

        else {

            throw new Error("failed to initiate stage");

        }

    }

    async function validateStage(token, referrer) {

        let response = await fetch('https://api.codex.lol/v1/stage/validate', {

            method: 'POST',

            headers: {

                'Android-Session': session,

                'Content-Type': 'application/json',

                'Task-Referrer': referrer

            },

            body: JSON.stringify({ token })

        });

        let data = await response.json();



        if (data.success) {

            return data.token;

        }

        else {

            throw new Error("failed to validate stage");

        }



    }

    async function authenticate(validatedTokens) {

        let response = await fetch('https://api.codex.lol/v1/stage/authenticate', {

            method: 'POST',

            headers: {

                'Android-Session': session,

                'Content-Type': 'application/json'

            },

            body: JSON.stringify({ tokens: validatedTokens })

        });

        let data = await response.json();



        if (data.success) {

            return true;

        }

        else {

            throw new Error("failed to authenticate");

        }

    }



    function decodeTokenData(token) {

        let data = token.split(".")[1];

        data = base64decode(data);

        return JSON.parse(data);

    }



    let stages = await getStages();

    let stagesCompleted = 0;

    while (localStorage.getItem(stages[stagesCompleted]) && stagesCompleted < stages.length) {

        stagesCompleted++;

    }

    if (stagesCompleted == stages.length) {

        return;

    }



    let validatedTokens = [];

    try {

        while (stagesCompleted < stages.length) {

            let stageId = stages[stagesCompleted].uuid;

            let initToken = await initiateStage(stageId);



            await sleep(6000);



            let tokenData = decodeTokenData(initToken);

            let referrer;

            if (tokenData.link.includes('loot-links')) {

                referrer = 'https://loot-links.com/';

            }

            else if (tokenData.link.includes('loot-link')) {

                referrer = 'https://loot-link.com/';

            }

            else {

                referrer = 'https://linkvertise.com/';

            }



            let validatedToken = await validateStage(initToken, referrer);

            validatedTokens.push({ uuid: stageId, token: validatedToken });

            notification(`${stagesCompleted + 1}/${stages.length} 已完成`, 5000);



            await sleep(1500);



            stagesCompleted++;

        }

        if (authenticate(validatedTokens)) {

            notification('绕过已完成');

            await sleep(3000);

            window.location.reload();

        }

    }

    catch (e) {

        handleError(e);

    }

}



async function fluxus() {

    let userAgents = await (await fetch('https://cdn.jsdelivr.net/npm/top-user-agents/src/mobile.json')).json()

    userAgents = userAgents.filter(userAgent => userAgent.includes('Chrome'));

    let userAgent = userAgents[Math.floor(Math.random() * userAgents.length)];

    let fluxusCustom = {

        start: function (link) {

            return new Promise((resolve, reject) => {

                GM.xmlHttpRequest({

                    method: "GET",

                    url: link,

                    anonymous: true,

                    headers: {

                        "user-agent": userAgent,

                        "accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7",

                        "accept-encoding": "gzip, deflate, br",

                        "accept-language": "en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7",

                        "sec-ch-ua": "\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"",

                        "sec-ch-ua-mobile": "?1",

                        "sec-ch-ua-platform": "\"Android\"",

                        "sec-fetch-dest": "document",

                        "sec-fetch-mode": "navigate",

                        "sec-fetch-site": "none",

                        "sec-fetch-user": "?1",

                        "upgrade-insecure-requests": "1"

                    },

                    onload: function (response) {

                        resolve(response);

                    },

                    onerror: function (error) {

                        reject(error);

                    }

                });

            });

        },

        linkvertiseSpoof: function (link, cookies) {

            return new Promise((resolve, reject) => {

                GM.xmlHttpRequest({

                    method: "GET",

                    url: link,

                    anonymous: true,

                    headers: {

                        "user-agent": userAgent,

                        "accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7",

                        "accept-encoding": "gzip, deflate, br",

                        "accept-language": "en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7",

                        "cookie": cookies,

                        "referer": "https://linkvertise.com/",

                        "sec-ch-ua": "\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"",

                        "sec-ch-ua-mobile": "?1",

                        "sec-ch-ua-platform": "\"Android\"",

                        "sec-fetch-dest": "document",

                        "sec-fetch-mode": "navigate",

                        "sec-fetch-site": "cross-site",

                        "sec-fetch-user": "?1",

                        "upgrade-insecure-requests": "1"

                    },

                    onload: function (response) {

                        resolve(response.responseText);

                    },

                    onerror: function (error) {

                        reject(error);

                    }

                });

            });

        },

        parseHeaders: functi
